AWSTemplateFormatVersion: 2010-09-09

Transform: AWS::Serverless-2016-10-31

Parameters:

  Environment:
    Type: String
    AllowedValues:
      - development
      - production
      - staging
      - testing

  EventName:
    Type: String
    AllowedPattern: ^[a-z][a-z-]+[a-z]$


Mappings:

  ApiParams:
    ServerlessRestApi:
      StageName: Prod

  RouteKeys:
    ChoiceMade:
      Key: CHOICE_MADE
    Connect:
      Key: $connect
    Disconnect:
      Key: $disconnect
    EventStageChanged:
      Key: EVENT_STAGE_CHANGED

  CallbackParams:
    Timeout:
      Value: 30


Conditions:

  IsProduction: !Equals [!Ref Environment, production]


Globals:

  Function:
    Runtime: python3.7
    Handler: index.handler
    MemorySize: 128
    Timeout: 3
    AutoPublishAlias: live
    Environment:
      Variables:
        APP_ENVIRONMENT: !Ref Environment
        EVENT_NAME: !Ref EventName
        DYNAMODB_ENDPOINT: ''

Resources:

  Table:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: !Sub ${Environment}-enchanted-brain-${EventName}
      AttributeDefinitions:
        - AttributeName: recordId
          AttributeType: S
      KeySchema:
        - AttributeName: recordId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: True

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${Environment}-enchanted-brain-${EventName}-dlq
      KmsMasterKeyId: alias/aws/sqs

  Api:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${Environment}-enchanted-brain-${EventName}
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.event

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-enchanted-brain-${EventName}-authorizer
      CodeUri: app/src/functions/authorizer
      Environment:
        Variables:
          PYTHONPATH: /var/task/vendor
          API_ARN: !Sub
            - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/${StageName}
            - StageName: !FindInMap [ApiParams,  ServerlessRestApi, StageName]
          API_METHOD_CHOICE_MADE: !FindInMap [RouteKeys, ChoiceMade, Key]
          API_METHOD_EVENT_STAGE_CHANGED: !FindInMap [RouteKeys, EventStageChanged, Key]
          COGNITO_APP_CLIENT_ID:
            Fn::ImportValue: !Sub ${Environment}-enchanted-brain-mobile-user-pool-client-id-v1
          COGNITO_USER_POOL_ID:
            Fn::ImportValue: !Sub ${Environment}-enchanted-brain-cognito-user-pool-id-v1
          COGNITO_GROUP_ADMIN:
            Fn::ImportValue: !Sub ${Environment}-enchanted-brain-admin-user-pool-group-name-v1
          COGNITO_GROUP_VISUALIZATION:
            Fn::ImportValue: !Sub ${Environment}-enchanted-brain-visualization-user-pool-group-name-v1

  AuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AuthorizerFunction.Alias
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*

  ApiAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: !Sub ${Environment}-enchanted-brain-${EventName}
      ApiId: !Ref Api
      AuthorizerType: REQUEST
      AuthorizerUri: !Join
        - ''
        - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path
          - !Sub /2015-03-31/functions/${AuthorizerFunction.Alias}/invocations
      IdentitySource:
        - route.request.querystring.token

  LambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${Environment}-enchanted-brain-${EventName}
      ContentUri: app/src/layer
      CompatibleRuntimes:
        - python3.7

  CallbackGlobalSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${Environment}-enchanted-brain-${EventName}-callback-global
      KmsMasterKeyId: alias/aws/sns

  CallbackVisualizationSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${Environment}-enchanted-brain-${EventName}-callback-visualization
      KmsMasterKeyId: alias/aws/sns

  CallbackKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub ${Environment}-enchanted-brain-${EventName}-callback
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: kms:*
            Resource: '*'
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
          - Effect: Allow
            Action:
              - kms:GenerateDataKey*
              - kms:Decrypt
            Resource: '*'
            Principal:
              Service: sns.amazonaws.com

  CallbackKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${Environment}/enchanted-brain/${EventName}/callback
      TargetKeyId: !Ref CallbackKmsKey

  CallbackFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-enchanted-brain-${EventName}-callback
      CodeUri: app/src/functions/callback
      Layers:
        - !Ref LambdaLayer
      Timeout: !FindInMap [CallbackParams, Timeout, Value]
      Environment:
        Variables:
          API_URL: !Sub
            - https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${StageName}
            - StageName: !FindInMap [ApiParams,  ServerlessRestApi, StageName]
      Policies:
        - SQSPollerPolicy:
            QueueName: !Sub ${Environment}-enchanted-brain-${EventName}-callback-*
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: execute-api:ManageConnections
              Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*
            - Effect: Allow
              Action: kms:Decrypt
              Resource: !GetAtt CallbackKmsKey.Arn

  CallbackFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CallbackFunction.Alias
      Principal: sqs.amazonaws.com
      SourceArn: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${Environment}-enchanted-brain-${EventName}-callback-*

  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-enchanted-brain-${EventName}-on-connect
      CodeUri: app/src/functions/on_connect
      Layers:
        - !Ref LambdaLayer
      Timeout: 20
      Environment:
        Variables:
          CALLBACK_FUNCTION_ARN: !Ref CallbackFunction.Alias
          CALLBACK_GLOBAL_SNS_TOPIC_ARN: !Ref CallbackGlobalSnsTopic
          CALLBACK_SQS_QUEUE_ARN_PREFIX: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${Environment}-enchanted-brain-${EventName}-callback
          CALLBACK_TIMEOUT_SECONDS: !FindInMap [CallbackParams, Timeout, Value]
          CALLBACK_VISUALIZATION_SNS_TOPIC_ARN: !Ref CallbackVisualizationSnsTopic
          DEAD_LETTER_QUEUE_ARN: !GetAtt DeadLetterQueue.Arn
          DYNAMODB_TABLE_NAME: !Ref Table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
        - SQSSendMessagePolicy:
            QueueName: !Sub ${Environment}-enchanted-brain-${EventName}-callback-*
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: sqs:CreateQueue
              Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${Environment}-enchanted-brain-${EventName}-callback-*
            - Effect: Allow
              Action: sns:Subscribe
              Resource:
                - !Ref CallbackGlobalSnsTopic
                - !Ref CallbackVisualizationSnsTopic
              Condition:
                ForAnyValue:StringEquals:
                  sns:Protocol: sqs
                ForAnyValue:StringLike:
                  sns:Endpoint: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${Environment}-enchanted-brain-${EventName}-callback-*
            - Effect: Allow
              Action: lambda:CreateEventSourceMapping
              Resource: '*'
              Condition:
                ForAnyValue:ArnEquals:
                  lambda:FunctionArn: !Ref CallbackFunction.Alias

  OnConnectRoute:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: cloudformation.ws-route.yml
      Parameters:
        ApiId: !Ref Api
        AuthorizerId: !Ref ApiAuthorizer
        FunctionArn: !Ref OnConnectFunction.Alias
        RouteKey: !FindInMap [RouteKeys, Connect, Key]

  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-enchanted-brain-${EventName}-on-disconnect
      CodeUri: app/src/functions/on_disconnect
      Layers:
        - !Ref LambdaLayer
      Timeout: 120
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref Table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: sqs:DeleteQueue
              Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${Environment}-enchanted-brain-${EventName}-callback-*
            - Effect: Allow
              Action: sns:Unsubscribe
              Resource: '*'
            - Effect: Allow
              Action: lambda:DeleteEventSourceMapping
              Resource: '*'
              Condition:
                ForAnyValue:ArnEquals:
                  lambda:FunctionArn: !Ref CallbackFunction.Alias

  OnDisconnectRoute:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: cloudformation.ws-route.yml
      Parameters:
        ApiId: !Ref Api
        FunctionArn: !Ref OnDisconnectFunction.Alias
        RouteKey: !FindInMap [RouteKeys, Disconnect, Key]

  ChoiceMadeSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${Environment}-enchanted-brain-${EventName}-choice-made
      KmsMasterKeyId: alias/aws/sns

  ChoiceAggregator:
    Type: AWS::Serverless::Application
    Properties:
      Location: cloudformation.choice-aggregator.yml
      Parameters:
        Environment: !Ref Environment
        TableName: !Ref Table
        LambdaLayer: !Ref LambdaLayer

  OnChoiceMadeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-enchanted-brain-${EventName}-on-choice-made
      CodeUri: app/src/functions/on_choice_made
      Layers:
        - !Ref LambdaLayer
      Environment:
        Variables:
          CALLBACK_VISUALIZATION_SNS_TOPIC_ARN: !Ref CallbackVisualizationSnsTopic
          CHOICE_MADE_SNS_TOPIC_ARN: !Ref ChoiceMadeSnsTopic
          AGGREGATE_CHOICE_DELIVERY_STREAM_NAME: !GetAtt ChoiceAggregator.Outputs.KinesisFirehoseStreamName
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt ChoiceMadeSnsTopic.TopicName
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt CallbackVisualizationSnsTopic.TopicName
        - FirehoseWritePolicy:
            DeliveryStreamName: !GetAtt ChoiceAggregator.Outputs.KinesisFirehoseStreamName

  OnChoiceMadeRoute:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: cloudformation.ws-route.yml
      Parameters:
        ApiId: !Ref Api
        FunctionArn: !Ref OnChoiceMadeFunction.Alias
        RouteKey: !FindInMap [RouteKeys, ChoiceMade, Key]

  OnEventStageChangedFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-enchanted-brain-${EventName}-on-event-stage-changed
      CodeUri: app/src/functions/on_event_stage_changed
      Timeout: 20
      Layers:
        - !Ref LambdaLayer
      Environment:
        Variables:
          CALLBACK_GLOBAL_SNS_TOPIC_ARN: !Ref CallbackGlobalSnsTopic
          DYNAMODB_TABLE_NAME: !Ref Table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt CallbackGlobalSnsTopic.TopicName

  OnEventStageChangedRoute:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: cloudformation.ws-route.yml
      Parameters:
        ApiId: !Ref Api
        FunctionArn: !Ref OnEventStageChangedFunction.Alias
        RouteKey: !FindInMap [RouteKeys, EventStageChanged, Key]

  PrepareStackFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-enchanted-brain-${EventName}-prepare-stack
      CodeUri: app/src/functions/prepare_stack
      Layers:
        - !Ref LambdaLayer
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref Table
          KINESIS_ANALYTICS_APPLICATION_NAME: !GetAtt ChoiceAggregator.Outputs.KinesisAnalyticsApplicationName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: kinesisanalytics:StartApplication
              Resource: !Sub
                - arn:aws:kinesisanalytics:${AWS::Region}:${AWS::AccountId}:application/${KinesisAnalyticsApplicationName}
                - { KinesisAnalyticsApplicationName: !GetAtt ChoiceAggregator.Outputs.KinesisAnalyticsApplicationName }

  OnStackChange:
    Type: Custom::InvokeLambda
    Condition: IsProduction
    DependsOn:
      - ChoiceAggregator
      - Table
      - PrepareStackFunction
    Properties:
      ServiceToken: !Ref PrepareStackFunction.Alias

  ApiDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ApiAuthorizer
      - AuthorizerPermission
      - OnChoiceMadeFunctionAliaslive
      - OnChoiceMadeRoute
      - OnConnectFunctionAliaslive
      - OnConnectRoute
      - OnDisconnectFunctionAliaslive
      - OnDisconnectRoute
      - OnEventStageChangedFunctionAliaslive
      - OnEventStageChangedRoute
    Properties:
      ApiId: !Ref Api

  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref Api
      DeploymentId: !Ref ApiDeployment
      StageName: !FindInMap [ApiParams,  ServerlessRestApi, StageName]
      DefaultRouteSettings:
        DataTraceEnabled: true
        LoggingLevel: !If [IsProduction, ERROR, INFO]

Outputs:

  TableName:
    Value: !Ref Table

  WebSocketURI:
    Value: !Sub wss://${Api}.execute-api.${AWS::Region}.amazonaws.com/${ApiStage}
