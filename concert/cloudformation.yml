AWSTemplateFormatVersion: 2010-09-09

Transform: AWS::Serverless-2016-10-31

Parameters:

  Environment:
    Type: String
    AllowedValues:
      - development
      - production
      - staging
      - testing

  EventName:
    Type: String


Mappings:

  ApiParams:
    ServerlessRestApi:
      StageName: Prod

  RouteKeys:
    ChoiceMade:
      Key: CHOICE_MADE
    Connect:
      Key: $connect
    Disconnect:
      Key: $disconnect
    EventStageChanged:
      Key: EVENT_STAGE_CHANGED


Globals:

  Function:
    Runtime: python3.7
    Handler: index.handler
    MemorySize: 128
    Timeout: 3
    AutoPublishAlias: live
    Environment:
      Variables:
        APP_ENVIRONMENT: !Ref Environment
        EVENT_NAME: !Ref EventName
        DYNAMODB_ENDPOINT: ''

Resources:

  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-enchanted-brain
      AttributeDefinitions:
        - AttributeName: recordId
          AttributeType: S
      KeySchema:
        - AttributeName: recordId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      SSESpecification:
        SSEEnabled: True

  Api:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${Environment}-enchanted-brain
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.event

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-enchanted-brain-authorizer
      CodeUri: app/src/functions/authorizer
      Environment:
        Variables:
          PYTHONPATH: /var/task/vendor
          API_ARN: !Sub
            - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/${StageName}
            - StageName: !FindInMap [ApiParams,  ServerlessRestApi, StageName]
          API_METHOD_CHOICE_MADE: !FindInMap [RouteKeys, ChoiceMade, Key]
          API_METHOD_EVENT_STAGE_CHANGED: !FindInMap [RouteKeys, EventStageChanged, Key]
          COGNITO_APP_CLIENT_ID:
            Fn::ImportValue: !Sub ${Environment}-enchanted-brain-mobile-user-pool-client-id-v1
          COGNITO_USER_POOL_ID:
            Fn::ImportValue: !Sub ${Environment}-enchanted-brain-cognito-user-pool-id-v1
          COGNITO_GROUP_ADMIN:
            Fn::ImportValue: !Sub ${Environment}-enchanted-brain-admin-user-pool-group-name-v1
          COGNITO_GROUP_VISUALIZATION:
            Fn::ImportValue: !Sub ${Environment}-enchanted-brain-visualization-user-pool-group-name-v1

  AuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AuthorizerFunction.Alias
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*

  ApiAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: !Sub ${Environment}-enchanted-brain
      ApiId: !Ref Api
      AuthorizerType: REQUEST
      AuthorizerUri: !Join
        - ''
        - - !Sub arn:aws:apigateway:${AWS::Region}:lambda:path
          - !Sub /2015-03-31/functions/${AuthorizerFunction.Alias}/invocations
      IdentitySource:
        - route.request.header.Authorization

  LambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${Environment}-enchanted-brain
      ContentUri: app/src/layer
      CompatibleRuntimes:
        - python3.7

  CallbackGlobalSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${Environment}-enchanted-brain-callback-global
      KmsMasterKeyId: alias/aws/sns

  CallbackVisualizationSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${Environment}-enchanted-brain-callback-visualization
      KmsMasterKeyId: alias/aws/sns

  CallbackKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub ${Environment}-enchanted-brain-callback
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: kms:*
            Resource: '*'
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
          - Effect: Allow
            Action:
              - kms:GenerateDataKey*
              - kms:Decrypt
            Resource: '*'
            Principal:
              Service: sns.amazonaws.com

  CallbackKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${Environment}/enchanted-brain/callback
      TargetKeyId: !Ref CallbackKmsKey

  CallbackFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-enchanted-brain-callback
      CodeUri: app/src/functions/callback
      Layers:
        - !Ref LambdaLayer
      Environment:
        Variables:
          API_URL: !Sub
            - https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${StageName}
            - StageName: !FindInMap [ApiParams,  ServerlessRestApi, StageName]
      Policies:
        - SQSPollerPolicy:
            QueueName: !Sub ${Environment}-enchanted-brain-callback-*
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: execute-api:ManageConnections
              Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*
            - Effect: Allow
              Action: kms:Decrypt
              Resource: !GetAtt CallbackKmsKey.Arn

  CallbackFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CallbackFunction.Alias
      Principal: sqs.amazonaws.com
      SourceArn: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${Environment}-enchanted-brain-callback-*

  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-enchanted-brain-on-connect
      CodeUri: app/src/functions/on_connect
      Layers:
        - !Ref LambdaLayer
      Timeout: 10
      Environment:
        Variables:
          CALLBACK_FUNCTION_ARN: !Ref CallbackFunction.Alias
          CALLBACK_GLOBAL_SNS_TOPIC_ARN: !Ref CallbackGlobalSnsTopic
          CALLBACK_VISUALIZATION_SNS_TOPIC_ARN: !Ref CallbackVisualizationSnsTopic
          CALLBACK_SQS_QUEUE_ARN_PREFIX: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${Environment}-enchanted-brain-callback
          DYNAMODB_TABLE_NAME: !Ref Table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
        - SQSSendMessagePolicy:
            QueueName: !Sub ${Environment}-enchanted-brain-callback-*
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: sqs:CreateQueue
              Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${Environment}-enchanted-brain-callback-*
            - Effect: Allow
              Action: sns:Subscribe
              Resource:
                - !Ref CallbackGlobalSnsTopic
                - !Ref CallbackVisualizationSnsTopic
              Condition:
                ForAnyValue:StringEquals:
                  sns:Protocol: sqs
                ForAnyValue:StringLike:
                  sns:Endpoint: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${Environment}-enchanted-brain-callback-*
            - Effect: Allow
              Action: lambda:CreateEventSourceMapping
              Resource: '*'
              Condition:
                ForAnyValue:ArnEquals:
                  lambda:FunctionArn: !Ref CallbackFunction.Alias

  OnConnectRoute:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: cloudformation.ws-route.yml
      Parameters:
        ApiId: !Ref Api
        AuthorizerId: !Ref ApiAuthorizer
        CreateRouteResponse: 'yes'
        FunctionArn: !Ref OnConnectFunction.Alias
        RouteKey: !FindInMap [RouteKeys, Connect, Key]

  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-enchanted-brain-on-disconnect
      CodeUri: app/src/functions/on_disconnect
      Layers:
        - !Ref LambdaLayer
      Timeout: 120
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref Table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: sqs:DeleteQueue
              Resource: !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${Environment}-enchanted-brain-callback-*
            - Effect: Allow
              Action: sns:Unsubscribe
              Resource: '*'
            - Effect: Allow
              Action: lambda:DeleteEventSourceMapping
              Resource: '*'
              Condition:
                ForAnyValue:ArnEquals:
                  lambda:FunctionArn: !Ref CallbackFunction.Alias

  OnDisconnectRoute:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: cloudformation.ws-route.yml
      Parameters:
        ApiId: !Ref Api
        FunctionArn: !Ref OnDisconnectFunction.Alias
        RouteKey: !FindInMap [RouteKeys, Disconnect, Key]

  ChoiceMadeSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${Environment}-enchanted-brain-choice-made
      KmsMasterKeyId: alias/aws/sns

  OnChoiceMadeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-enchanted-brain-on-choice-made
      CodeUri: app/src/functions/on_choice_made
      Layers:
        - !Ref LambdaLayer
      Environment:
        Variables:
          CALLBACK_VISUALIZATION_SNS_TOPIC_ARN: !Ref CallbackVisualizationSnsTopic
          CHOICE_MADE_SNS_TOPIC_ARN: !Ref ChoiceMadeSnsTopic
          AGGREGATE_CHOICE_DELIVERY_STREAM_NAME: !Sub ${Environment}-AggregateChoiceDataStream
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt ChoiceMadeSnsTopic.TopicName
        - FirehoseWritePolicy:
            DeliveryStreamName: !Sub ${Environment}-AggregateChoiceDataStream

  OnChoiceMadeRoute:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: cloudformation.ws-route.yml
      Parameters:
        ApiId: !Ref Api
        FunctionArn: !Ref OnChoiceMadeFunction.Alias
        RouteKey: !FindInMap [RouteKeys, ChoiceMade, Key]

  OnEventStageChangedFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-enchanted-brain-on-event-stage-changed
      CodeUri: app/src/functions/on_event_stage_changed
      Layers:
        - !Ref LambdaLayer
      Environment:
        Variables:
          CALLBACK_GLOBAL_SNS_TOPIC_ARN: !Ref CallbackGlobalSnsTopic
          DYNAMODB_TABLE_NAME: !Ref Table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt CallbackGlobalSnsTopic.TopicName

  OnEventStageChangedRoute:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: cloudformation.ws-route.yml
      Parameters:
        ApiId: !Ref Api
        FunctionArn: !Ref OnEventStageChangedFunction.Alias
        RouteKey: !FindInMap [RouteKeys, EventStageChanged, Key]

  ApiDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ApiAuthorizer
      - AuthorizerPermission
      - OnChoiceMadeFunctionAliaslive
      - OnChoiceMadeRoute
      - OnConnectFunctionAliaslive
      - OnConnectRoute
      - OnDisconnectFunctionAliaslive
      - OnDisconnectRoute
      - OnEventStageChangedFunctionAliaslive
      - OnEventStageChangedRoute
    Properties:
      ApiId: !Ref Api

  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref Api
      DeploymentId: !Ref ApiDeployment
      StageName: !FindInMap [ApiParams,  ServerlessRestApi, StageName]

  ChoiceWriterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-enchanted-brain-choice-writer
      CodeUri: app/src/functions/choice_writer
      Layers:
        - !Ref LambdaLayer
      Events:
        SnsEvent:
          Type: SNS
          Properties:
            Topic: !Ref ChoiceMadeSnsTopic
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref Table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table

  AggregateChoiceDataStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub ${Environment}-AggregateChoiceDataStream
      S3DestinationConfiguration:
        BucketARN: !GetAtt AggregateChoiceDataS3Bucket.Arn
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 50
        CompressionFormat: UNCOMPRESSED
        RoleARN: !GetAtt AggregateChoiceDataStreamRole.Arn
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Sub ${Environment}-enchanted-brain-aggregateChoiceDataStreamLogs
          LogStreamName: !Sub ${Environment}-enchanted-brain-aggregateChoiceDataStreamLogs

  AggregateChoiceDataStreamLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${Environment}-enchanted-brain-aggregateChoiceDataStreamLogs
      RetentionInDays: 30
  AggregateChoiceDataStreamLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Sub ${Environment}-enchanted-brain-aggregateChoiceDataStreamLogs
      LogStreamName: s3Backup

  AggregateChoiceDataStreamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: firehose_delivery_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: s3:*
                Resource: '*'
              - Effect: Allow
                Action: logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/${Environment}-enchanted-brain-aggregateChoiceDataStreamLogs:*

  AggregateChoiceDataApplication:
    Type: AWS::KinesisAnalytics::Application
    Properties:
      ApplicationCode: 'CREATE OR REPLACE STREAM "DESTINATION_SQL_STREAM" (CHOICE_TIME TIMESTAMP, CHOICE_TYPE VARCHAR(32), CHOICE_SUM DOUBLE, CHOICE_COUNT int);
                        CREATE OR REPLACE PUMP "NUMERIC_PUMP" AS
                          INSERT INTO "DESTINATION_SQL_STREAM"
                            SELECT STREAM CHOICE_TIME,
                                   CHOICE_TYPE,
                                   SUM(CAST(CHOICE AS DOUBLE)) OVER (
                                     PARTITION BY CHOICE_TYPE
                                     RANGE INTERVAL ''1'' MINUTE PRECEDING
                                   ) AS choiceSum,
                                   COUNT(*) OVER W1 AS choiceCount
                            FROM   "ChoiceDataStream_001"
                            WHERE CHOICE_TYPE NOT LIKE ''CHOICE_COLOR''
                            WINDOW W1 AS (
                              PARTITION BY CHOICE_TIME
                              RANGE INTERVAL ''1'' MINUTE PRECEDING
                            );'
      Inputs:
      - NamePrefix: ChoiceDataStream
        InputSchema:
          RecordColumns:
            - Mapping: timestamp
              Name: CHOICE_TIME
              SqlType: TIMESTAMP
            - Mapping: choiceType
              Name: CHOICE_TYPE
              SqlType: VARCHAR(32)
            - Mapping: choice
              Name: CHOICE
              SqlType: VARCHAR(32)
          RecordFormat:
            RecordFormatType: JSON
        KinesisFirehoseInput:
          ResourceARN: !GetAtt AggregateChoiceDataStream.Arn
          RoleARN: !GetAtt AggregateChoiceDataApplicationRole.Arn

  AggregateChoiceDataApplicationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: kinesisanalytics.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: read_firehose_delivery_stream_policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - firehose:DescribeDeliveryStream
                  - firehose:Get*
                Resource: !GetAtt AggregateChoiceDataStream.Arn


  AggregateChoiceDataS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${Environment}-enchanted-brain-choices
      AccessControl: private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3

Outputs:

  TableName:
    Value: !Ref Table

  WebSocketURI:
    Value: !Sub wss://${Api}.execute-api.${AWS::Region}.amazonaws.com/${ApiStage}
