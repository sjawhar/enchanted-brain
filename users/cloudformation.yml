AWSTemplateFormatVersion: '2010-09-09'

Transform: AWS::Serverless-2016-10-31

Parameters:

  Environment:
    Type: String
    AllowedValues:
      - development
      - production
      - staging
      - testing

  EventName:
    Type: String


Mappings:

  SsmParameters:
    SmsExternalId:
      Name: enchanted-brain/sms-external-id
      Version: 1


Conditions:

  IsProduction: !Equals [!Ref Environment, production]


Resources:

  SmsIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::Region}-${Environment}-enchanted-brain-sms-v1
      Path: !Sub /${AWS::Region}/${Environment}/
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Principal:
              Service: cognito-idp.amazonaws.com
            Effect: Allow
            Condition:
              StringEquals:
                sts:ExternalId: !Sub
                  - '{{resolve:ssm:/${Environment}/${Parameter}:${Version}}}'
                  - Parameter: !FindInMap [SsmParameters, SmsExternalId, Name]
                    Version: !FindInMap [SsmParameters, SmsExternalId, Version]
      Policies:
        - PolicyName: !Sub ${AWS::Region}-${Environment}-enchanted-brain-sms
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: sns:Publish
                Effect: Allow
                Resource: '*'

  PreSignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-enchanted-brain-pre-signup
      Runtime: python3.7
      CodeUri: app/src/functions/pre_signup
      Handler: index.handler
      MemorySize: 128
      Timeout: 3
      AutoPublishAlias: live

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${Environment}-enchanted-brain
      UsernameAttributes:
        - phone_number
      LambdaConfig:
        PreSignUp: !Ref PreSignUpFunction.Alias
      SmsConfiguration:
        ExternalId: !Sub
          - '{{resolve:ssm:/${Environment}/${Parameter}:${Version}}}'
          - Parameter: !FindInMap [SsmParameters, SmsExternalId, Name]
            Version: !FindInMap [SsmParameters, SmsExternalId, Version]
        SnsCallerArn: !GetAtt SmsIamRole.Arn
      SmsVerificationMessage: Your Enchanted Brain verification code is {####}
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: yes
          RequireNumbers: yes
          RequireSymbols: yes
          RequireUppercase: yes
      Schema:
        - Name: phone_number
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: gender
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: age
          AttributeDataType: Number
          Mutable: true
          Required: false
          NumberAttributeConstraints:
            MinValue: 0
            MaxValue: 200
        - Name: acceptResearch
          AttributeDataType: String
          Mutable: true
          Required: false
          StringAttributeConstraints:
            MinLength: 1
            MaxLength: 1
        - Name: colorPerception
          AttributeDataType: Number
          Mutable: true
          Required: false
          NumberAttributeConstraints:
            MinValue: 0
            MaxValue: 4
        - Name: countryOfBirth
          AttributeDataType: String
          Mutable: true
          Required: false
          StringAttributeConstraints:
            MinLength: 2
            MaxLength: 3
        - Name: countryOfResidence
          AttributeDataType: String
          Mutable: true
          Required: false
          StringAttributeConstraints:
            MinLength: 2
            MaxLength: 3

  UserPoolLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      Principal: cognito-idp.amazonaws.com
      FunctionName: !Ref PreSignUpFunction.Alias
      SourceArn: !Sub
        - arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}
        - { UserPoolId: !Ref CognitoUserPool }

  AdminUserPoolGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admin
      UserPoolId: !Ref CognitoUserPool
      Precedence: 20

  VisualizationUserPoolGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Visualization
      UserPoolId: !Ref CognitoUserPool
      Precedence: 50

  MobileUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${Environment}.enchanted-brain.app
      UserPoolId: !Ref CognitoUserPool
      ReadAttributes:
        - phone_number
        - phone_number_verified
        - gender
        - custom:age
        - custom:acceptResearch
        - custom:colorPerception
        - custom:countryOfBirth
        - custom:countryOfResidence
      WriteAttributes:
        - phone_number
        - gender
        - custom:age
        - custom:acceptResearch
        - custom:colorPerception
        - custom:countryOfBirth
        - custom:countryOfResidence
      RefreshTokenValidity: 30
      GenerateSecret: false
      ExplicitAuthFlows: !If
        - IsProduction
        - !Ref AWS::NoValue
        - - USER_PASSWORD_AUTH

Outputs:

  CognitoUserPoolId:
    Value: !Ref CognitoUserPool
    Export:
      Name: !Sub ${Environment}-enchanted-brain-cognito-user-pool-id-v1

  CognitoUserPoolArn:
    Value: !GetAtt CognitoUserPool.Arn
    Export:
      Name: !Sub ${Environment}-enchanted-brain-cognito-user-pool-arn-v1

  AdminUserPoolGroupName:
    Value: !Ref AdminUserPoolGroup
    Export:
      Name: !Sub ${Environment}-enchanted-brain-admin-user-pool-group-name-v1

  VisualizationUserPoolGroupName:
    Value: !Ref VisualizationUserPoolGroup
    Export:
      Name: !Sub ${Environment}-enchanted-brain-visualization-user-pool-group-name-v1

  MobileUserPoolClientId:
    Value: !Ref MobileUserPoolClient
    Export:
      Name: !Sub ${Environment}-enchanted-brain-mobile-user-pool-client-id-v1
