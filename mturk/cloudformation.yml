AWSTemplateFormatVersion: 2010-09-09

Transform: AWS::Serverless-2016-10-31

Parameters:

  Environment:
    Type: String
    AllowedValues:
      - development
      - production
      - staging
      - testing

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>

  ValidChoiceTypes:
    Description: List of valid choice types
    Type: CommaDelimitedList

  ValidSongIds:
    Description: List of valid song IDs
    Type: CommaDelimitedList

  VpcId:
    Type: AWS::EC2::VPC::Id


Mappings:

  ServiceParams:
    production:
      Cpu: 1024
      Memory: 2048
      Count: 1
      ContainerPort: 19000


Resources:

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub ${Environment}-enchanted-brain-mturk
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3

  AppSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${Environment}/enchanted-brain/mturk/app-secret
      GenerateSecretString:
        PasswordLength: 32

  ChoiceWriter:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-enchanted-brain-mturk-choice-writer
      Runtime: nodejs12.x
      CodeUri: app/src/functions/choice-writer
      Handler: index.handler
      MemorySize: 128
      Timeout: 30
      AutoPublishAlias: live
      Environment:
        Variables:
          ENCHANTED_BRAIN_APP_SECRET_ARN: !Ref AppSecret
          ENCHANTED_BRAIN_S3_BUCKET_NAME: !Ref S3Bucket
          ENCHANTED_BRAIN_VALID_CHOICE_TYPES: !Join [',', !Ref ValidChoiceTypes]
          ENCHANTED_BRAIN_VALID_SONG_IDS: !Join [',', !Ref ValidSongIds]
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /Choices
            Method: POST
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: s3:PutObject
              Resource: !Sub ${S3Bucket.Arn}/*
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref AppSecret

  EcsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::Region}-${Environment}-enchanted-brain-mturk-ecs-v1
      Path: !Sub /${AWS::Region}/${Environment}/enchanted-brain/mturk/
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::Region}-${Environment}-enchanted-brain-ecs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AttachNetworkInterface
                  - ec2:CreateNetworkInterface
                  - ec2:CreateNetworkInterfacePermission
                  - ec2:DeleteNetworkInterface
                  - ec2:DeleteNetworkInterfacePermission
                  - ec2:Describe*
                  - ec2:DetachNetworkInterface
                Resource: '*'

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${Environment}-enchanted-brain-mturk-expo

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::Region}-${Environment}-enchanted-brain-mturk-expo-execution-v1
      Path: !Sub /${AWS::Region}/${Environment}/enchanted-brain/mturk/expo/
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::Region}-${Environment}-enchanted-brain-mturk-expo-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                  - ecr:GetDownloadUrlForLayer
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${Environment}-enchanted-brain-mturk-expo

  EcsServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${Environment}-enchanted-brain-mturk-expo
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: !FindInMap [ServiceParams, !Ref Environment, ContainerPort]
          ToPort: !FindInMap [ServiceParams, !Ref Environment, ContainerPort]
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-enchanted-brain-mturk-expo

  EcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${Environment}-enchanted-brain-mturk-expo-v1
      Cpu: !FindInMap [ServiceParams, !Ref Environment, Cpu]
      Memory: !FindInMap [ServiceParams, !Ref Environment, Memory]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Sub ${Environment}-enchanted-brain-mturk-expo
          Cpu: !FindInMap [ServiceParams, !Ref Environment, Cpu]
          Memory: !FindInMap [ServiceParams, !Ref Environment, Memory]
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/enchanted-brain/mturk-expo:${SongId}_${ChoiceType}
          Environment:
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: MTURK_SONG_ID
              Value: !Ref SongId
            - Name: MTURK_CHOICE_TYPE
              Value: !Ref ChoiceType
          PortMappings:
            - ContainerPort: !FindInMap [ServiceParams, !Ref Environment, ContainerPort]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Sub mturk-expo-${SongId}-${ChoiceType}

  EcsService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${Environment}-enchanted-brain-mturk-expo-v1
      Cluster: !Ref EcsCluster
      LaunchType: FARGATE
      DesiredCount: !FindInMap [ServiceParams, !Ref Environment, Count]
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref EcsServiceSecurityGroup
          Subnets: !Ref SubnetIds
      TaskDefinition: !Ref EcsTaskDefinition


Outputs:

  ServerlessRestApiId:
    Value: !Ref ServerlessRestApi

  ServerlessRestApiUrl:
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ServerlessRestApi.Stage}
